!(function (e, t) {
    "use strict";
    var n =
        ((Element.prototype.offset = function () {
            var t = this.getBoundingClientRect(),
                n = e.pageXOffset || document.documentElement.scrollLeft,
                o = e.pageYOffset || document.documentElement.scrollTop;
            return {top: t.top + o, left: t.left + n};
        }),
        (Element.prototype.css = function (e) {
            if ("string" == typeof e) return getComputedStyle(this, "")[e];
            if ("object" == typeof e)
                for (var n in e) this.style[n] !== t && (this.style[n] = e[n]);
        }),
        {
            init: function (n) {
                var o,
                    i,
                    s,
                    r,
                    a,
                    l,
                    c,
                    u,
                    d,
                    p,
                    m,
                    f,
                    v,
                    h,
                    y,
                    L,
                    b,
                    g,
                    E,
                    S = 0,
                    $ = !1,
                    M = null,
                    q = [],
                    w = !1,
                    k = !1,
                    T = !1,
                    C = {
                        container: "body",
                        volume: 0.5,
                        autoPlay: !1,
                        notification: !1,
                        playList: [],
                        layout: "stacked",
                        shuffle: !0,
                        loop: !0,
                        hideTitle: !0,
                        customIcons: {},
                        hideVolume: !1,
                        themeColor: "blue",
                    };
                if (
                    ((function () {
                        const e =
                            "https://fonts.googleapis.com/icon?family=Material+Icons";
                        if (document.head.querySelector(`link[href="${e}"]`))
                            return;
                        const t = document.createElement("link");
                        (t.rel = "stylesheet"),
                            (t.href = e),
                            document.head.prepend(t);
                    })(),
                    !("classList" in document.documentElement))
                )
                    return !1;
                let A =
                        (C = (function (e, t) {
                            for (var n in t)
                                e.hasOwnProperty(n) && (e[n] = t[n]);
                            return e;
                        })(C, n)).container.split("#")[1] ||
                        C.container.split(".")[1] ||
                        [],
                    N = `mp--${A}`;
                if (
                    ((o = (function (e, n) {
                        var o = document.createElement(e);
                        if (n) for (var i in n) o[i] !== t && (o[i] = n[i]);
                        return o;
                    })("div", {
                        className: `mp-${A}`,
                        id: `mp--${A}`,
                        innerHTML:
                            '<div class="mp-inner-panel">\n            <div class="mp-item mp--track">\n                <div class="mp-info">\n                    <div class="mp-title"></div>\n                    <div class="mp-progress-container">\n                    <span class="mp-time--current">--</span>\n                        <div class="mp-progress">\n                            <div class="mp-bar"></div>\n                            <div class="mp-preload-bar"></div>\n                        </div>\n                        <span class="mp-time--duration">--</span>\n                    </div>\n                </div>\n            </div>\n\n            <div class="mp-control-section mp-settings">\n                <div class="mp-item mp--repeat-shuffle">\n                    <button class="mp-controls mp-repeat-btn">\n                        <i class="icon material-icons">repeat</i>\n                    </button>\n                    <button class="mp-controls mp-shuffle-btn">\n                        <i class="icon material-icons">shuffle</i>\n                    </button>\n                </div>\n\n                <div class="mp-item mp--playback">\n                    <button class="mp-controls mp-prev-btn"></button>\n                    <button class="mp-controls mp-toggle-btn"></button>\n                    <button class="mp-controls mp-next-btn"></button>\n                </div>\n\n                <div class="mp-item mp--settings mp-volume-container">\n                    <div class="mp-volume-btns">\n                        <button class="mp-controls mp-volume-btn">\n                            <i class="icon material-icons mp--volume-on"\n                                >volume_up</i\n                            >\n                            <i class="icon material-icons mp--volume-off"\n                                >volume_off</i\n                            >\n                        </button>\n                        <div class="mp-volume">\n                            <div class="mp-volume-progress">\n                                <div class="mp-volume-bar"></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>',
                    })),
                    !T && null !== o)
                ) {
                    if (
                        (document
                            .querySelector(C.container)
                            .insertBefore(o, null),
                        (h = o.querySelector(`#${N} .mp-inner-panel`)),
                        (i = o.querySelector(`#${N} .mp-toggle-btn`)),
                        (s = o.querySelector(`#${N} .mp-prev-btn`)),
                        (r = o.querySelector(`#${N} .mp-next-btn`)),
                        (a = o.querySelector(`#${N} .mp-repeat-btn`)),
                        (l = o.querySelector(`#${N} .mp-shuffle-btn`)),
                        (c = o.querySelector(`#${N} .mp-volume-btn`)),
                        (p = o.querySelector(`#${N} .mp-time--current`)),
                        (m = o.querySelector(`#${N} .mp-time--duration`)),
                        (u = o.querySelector(`#${N} .mp-bar`)),
                        (d = o.querySelector(`#${N} .mp-preload-bar`)),
                        (L = o.querySelector(`#${N} .mp-volume-bar`)),
                        (v = o.querySelector(`#${N} .mp-title`)),
                        (b = o.querySelector(`#${N} .mp--track`)),
                        (y = C.playList),
                        i.addEventListener("click", function () {
                            x() || (f.paused ? f.play() : f.pause());
                        }),
                        c.addEventListener("click", function () {
                            f.muted
                                ? (0 === parseInt(g, 10)
                                      ? ((L.style.width = "100%"),
                                        (f.volume = 0.5))
                                      : (L.style.width = g),
                                  (f.muted = !1),
                                  this.classList.remove("muted"))
                                : ((f.muted = !0),
                                  (L.style.width = 0),
                                  this.classList.add("muted"));
                        }),
                        a.addEventListener("click", function () {
                            var e = this.classList;
                            e.contains("mp-active")
                                ? (($ = !1), e.remove("mp-active"))
                                : (($ = !0), e.add("mp-active"));
                        }),
                        l.addEventListener("click", function () {
                            var e = this.classList;
                            e.contains("mp-active")
                                ? ((M = null), e.remove("mp-active"))
                                : ((M = [...Array(y.length).keys()]),
                                  e.add("mp-active"));
                        }),
                        e.addEventListener("resize", _),
                        u.parentNode.parentNode.addEventListener(
                            "mousedown",
                            function (e) {
                                (k = 3 === e.which), (w = !0), X(e);
                            }
                        ),
                        u.parentNode.parentNode.addEventListener(
                            "mousemove",
                            X
                        ),
                        document.documentElement.addEventListener("mouseup", Y),
                        L.parentNode.parentNode.addEventListener(
                            "mousedown",
                            function (e) {
                                (k = 3 === e.which), (w = !0), B(e);
                            }
                        ),
                        L.parentNode.parentNode.addEventListener(
                            "mousemove",
                            B
                        ),
                        document.documentElement.addEventListener("mouseup", Y),
                        s.addEventListener("click", function () {
                            (S = q.length > 1 ? q.splice(-2)[0] : 0), H();
                        }),
                        r.addEventListener("click", I),
                        y.length <= 1 &&
                            (r.setAttribute("disabled", !0),
                            s.setAttribute("disabled", !0)),
                        (T = !0),
                        !C.shuffle)
                    ) {
                        const e = o.querySelector(`#${N} .mp--repeat-shuffle`);
                        if (e) {
                            const t = e.querySelector(`#${N} .mp-shuffle-btn`);
                            e.removeChild(t);
                        }
                    }
                    if (!C.loop) {
                        const e = o.querySelector(`#${N} .mp--repeat-shuffle`);
                        if (e) {
                            const t = e.querySelector(`#${N} .mp-repeat-btn`);
                            e.removeChild(t);
                        }
                    }
                    if (C.hideTitle) {
                        const e = o.querySelector(`#${N} .mp-info`);
                        e && e.removeChild(v);
                    }
                    if (C.hideVolume) {
                        const e = o.querySelector(`#${N} .mp-volume-container`);
                        if (e) {
                            const t = e.querySelector(`#${N} .mp-volume-btns`);
                            e.removeChild(t);
                        }
                    }
                    (function () {
                        const e = O(
                                "i",
                                ["icon", "material-icons"],
                                "skip_previous"
                            ),
                            t = O(
                                "i",
                                ["icon", "material-icons", "mp--play"],
                                "play_arrow"
                            ),
                            n = O(
                                "i",
                                ["icon", "material-icons", "mp--pause"],
                                "pause"
                            ),
                            o = O("i", ["icon", "material-icons"], "skip_next");
                        [
                            ["prev", e],
                            ["next", o],
                            ["play", t],
                            ["pause", n],
                        ].forEach(([e, t]) => {
                            if (C.customIcons[e]) {
                                const t = {
                                    pause: ["icon", "mp--pause"],
                                    play: ["icon", "mp--play"],
                                    next: ["icon"],
                                    prev: ["icon"],
                                }[e];
                                if (t) {
                                    let n = C.customIcons[e];
                                    if (
                                        "function" != typeof n &&
                                        "object" != typeof n
                                    )
                                        return;
                                    "function" == typeof n &&
                                        (n = C.customIcons[e]());
                                    const o = P(n);
                                    o &&
                                        (o.classList.add(...t),
                                        (C.customIcons[e] = o));
                                }
                            } else C.customIcons[e] = t;
                        }),
                            s.appendChild(C.customIcons.prev),
                            r.appendChild(C.customIcons.next),
                            i.appendChild(C.customIcons.pause),
                            i.appendChild(C.customIcons.play);
                    })(),
                        (function () {
                            switch (C.layout) {
                                case "stacked":
                                default:
                                    return h.classList.add("stacked");
                                case "stacked-reverse":
                                    return h.classList.add("stacked-reverse");
                                case "horizontal":
                                    return h.classList.add("horizontal");
                                case "horizontal-reverse":
                                    h.classList.add("horizontal-reverse");
                            }
                        })(),
                        _(),
                        ((f = new Audio()).volume = C.volume),
                        x()
                            ? z()
                            : (C.themeColor &&
                                  document
                                      .querySelector(`#${N}`)
                                      .style.setProperty(
                                          "--theme-color",
                                          C.themeColor
                                      ),
                              (f.src = y[S].file),
                              (v.innerHTML = y[S].title || ""),
                              (f.preload = "auto"),
                              f.addEventListener(
                                  "error",
                                  function () {
                                      !x() && I();
                                  },
                                  !1
                              ),
                              f.addEventListener(
                                  "timeupdate",
                                  function () {
                                      if (0 !== f.readyState) {
                                          var e = Math.round(
                                              f.currentTime * (100 / f.duration)
                                          );
                                          u.style.width = e + "%";
                                          var t = Math.floor(
                                                  f.currentTime / 60
                                              ),
                                              n = Math.floor(
                                                  f.currentTime - 60 * t
                                              ),
                                              o = Math.floor(f.duration / 60),
                                              i = Math.floor(
                                                  f.duration - 60 * o
                                              );
                                          n < 10 && (n = "0" + n),
                                              i < 10 && (i = "0" + i),
                                              (p.innerHTML = t + ":" + n),
                                              (m.innerHTML = o + ":" + i);
                                          var s = f.buffered;
                                          if (s.length) {
                                              var r = Math.round(
                                                  (100 * s.end(0)) / f.duration
                                              );
                                              d.style.width = r + "%";
                                          }
                                      }
                                  },
                                  !1
                              ),
                              f.addEventListener(
                                  "ended",
                                  function () {
                                      I(!1);
                                  },
                                  !1
                              ),
                              f.addEventListener(
                                  "play",
                                  () => {
                                      i.classList.add("playing");
                                  },
                                  !1
                              ),
                              f.addEventListener(
                                  "pause",
                                  () => {
                                      i.classList.remove("playing");
                                  },
                                  !1
                              ),
                              C.autoPlay &&
                                  (f.play(),
                                  Array.isArray(E) &&
                                      E[S].classList.add("pl-current")),
                              setTimeout(() => {
                                  !(function () {
                                      if (!isNaN(f.duration)) {
                                          var e = Math.floor(f.duration / 60),
                                              t = Math.floor(
                                                  f.duration - 60 * e
                                              );
                                          m.innerHTML = e + ":" + t;
                                      }
                                  })();
                              }, 100));
                }
                function H() {
                    (S = S > y.length - 1 ? 0 : S) < 0 && (S = y.length - 1),
                        x()
                            ? z()
                            : (q.push(S),
                              (f.src = y[S].file),
                              (v.innerHTML = y[S].title || ""),
                              (f.preload = "auto"),
                              f.play());
                }
                function I(e) {
                    if (M) {
                        if (0 === M.length) {
                            if (!$ && !e) return f.pause();
                            M = [...Array(y.length).keys()];
                        }
                        let t = Math.floor(Math.random() * M.length);
                        S = M.splice(t, 1)[0];
                    } else {
                        if (S === y.length - 1 && !$ && !e)
                            return (
                                f.pause(), void i.classList.remove("playing")
                            );
                        S = S === y.length - 1 ? 0 : S + 1;
                    }
                    H();
                }
                function x() {
                    return 0 === y.length;
                }
                function z() {
                    f.pause(),
                        (f.src = ""),
                        (p.innerHTML = "--"),
                        (m.innerHTML = "--"),
                        (u.style.width = 0),
                        (d.style.width = 0),
                        (h.innerHTML =
                            '<div class="pl-empty">PlayList is empty</div>'),
                        (v.innerHTML = "queue is empty"),
                        (h.style.textAlign = "center");
                }
                function P(e) {
                    if ("string" == typeof e.type) {
                        const t = document.createElement(e.type);
                        for (const n in e.props)
                            if ("children" === n)
                                if (Array.isArray(e.props.children))
                                    e.props.children.forEach((e) => {
                                        const n = P(e);
                                        t.appendChild(n);
                                    });
                                else if ("object" == typeof e.props.children) {
                                    const n = P(e.props.children);
                                    t.appendChild(n);
                                } else t.innerHTML = e.props.children;
                            else
                                "className" === n
                                    ? t.setAttribute("class", e.props[n])
                                    : t.setAttribute(n, e.props[n]);
                        return t;
                    }
                    if (e.nodeName) return e;
                }
                function O(e = "div", t = [], n = "", o) {
                    const i = document.createElement(e);
                    return (
                        Array.isArray(t) && t.length && i.classList.add(...t),
                        n && (i.innerHTML = n),
                        o ? (o.appendChild(i), o) : i
                    );
                }
                function _() {
                    let e = b.css("width");
                    v.style.width = `${Math.round(parseInt(e, 10))}px`;
                }
                function j(t, n, o) {
                    var i;
                    if ("horizontal" === o)
                        return (
                            (i = Math.round(
                                (100 *
                                    (t.clientX -
                                        n.offset().left +
                                        e.pageXOffset)) /
                                    n.parentNode.offsetWidth
                            )),
                            (n.style.width = i + "%"),
                            i
                        );
                    var s = n.offset().top + n.offsetHeight - e.pageYOffset;
                    return (
                        (i = Math.round(s - t.clientY)) > 100 && (i = 100),
                        i < 0 && (i = 0),
                        (L.style.height = i + "%"),
                        i
                    );
                }
                function X(e) {
                    if (w && !1 === k && 0 !== f.readyState) {
                        var t = j(e, u, "horizontal");
                        f.currentTime = f.duration * (t / 100);
                    }
                }
                function Y() {
                    w = !1;
                }
                function B(e) {
                    if (((g = L.css("width")), w && !1 === k)) {
                        var t = j(e, L, "horizontal") / 100;
                        t <= 0
                            ? ((f.volume = 0), c.classList.add("muted"))
                            : (f.muted && (f.muted = !1),
                              (f.volume = t),
                              c.classList.remove("muted"));
                    }
                }
            },
        });
    e.AudioPlayer = n;
})(window);
